stages:
  - validate
  - upload-resources-to-s3
  - plan-and-apply

validate:
  stage: validate
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID_DEV_MANAGEMENT}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV_MANAGEMENT}
    - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    - cd ../example/deploy
    - rm -rf .terraform
    - terraform --version
    - terraform init
  script:
    - terraform validate
  tags:
    - docker_executor

upload-resources-to-s3:
  stage: upload-resources-to-s3
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - aws --version
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEVMGMT
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEVMGMT
    - aws configure set region $AWS_DEFAULT_REGION
  only:
    - master
  script:
    - aws s3 sync ./example/requests s3://$S3_BUCKET_NAME/requests/ --delete
  tags:
    - docker_executor

plan-and-apply:
  stage: plan-and-apply
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID_DEV_MANAGEMENT}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV_MANAGEMENT}
    - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    - cd ./example/deploy
    - terraform --version
    - terraform init
  only:
    - master
  script:
    - terraform plan
    - terraform apply --auto-approve
  dependencies:
    - validate
  tags:
    - docker_executor
